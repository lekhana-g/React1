REACT REDUX  - https://www.valentinog.com/blog/redux/

What problem does redux actually solve :-

state is everywhere in an application. In a frontend application there's a lot of logic being stuffed into the components.Redux solves this issues.
Redux helps giving each frontend component the exact piece of state it needs.

STORE - In redux, store is something that holds all of the application's state.
  // src/js/store/index.js
  import { createStore } from "redux";
  import rootReducer from "../reducers/index";
  const store = createStore(rootReducer);
  export default store;

  As you can see, store is the result of calling createStore, a function from the Redux library. 
  createStore takes a reducer as the first argument and in our case we passed in rootReducer

-State in Redux comes from Reducers

- A Redux reducer is just a JavaScript function. It takes two parameters: the current state and action 
  
-Reducers produce the state of an application. But how does a reducer know when to generate the next state?
 The second principle of Redux says the only way to change the state is by sending a signal to the store. 
 This signal is an action. So "dispatching an action" means sending out a signal to the store.

- When an action is dispatched, the store forwards a message (the action object) to the reducer.
  At this point the reducer says "oh, let's look at the type property of this action".
 Then depending on the action type, the reducer produces the next state, eventually merging the action payload into the new state.

-For React there is react-redux, a library for which you need to learn just one method for now: connect. 
 What does it do? Unsurprisingly it connects a React component with the Redux store.
  You will use connect with two or three arguments depending on the use case:
    -a mapStateToProps function (you can name it also "select")
    -a mapDispatchToProps function
    mapStateToProps does exactly what its name suggests: it connects a part of the Redux state to the props of a React component.
    By doing so a connected React component will have access to the exact part of the store it needs.
    mapDispatchToProps does something similar, but for actions. mapDispatchToProps connects Redux actions to React props. 
    This way a connected React component will be able to send messages to the store.

-Provider wraps up your React application and makes it aware of the entire Redux's store.



